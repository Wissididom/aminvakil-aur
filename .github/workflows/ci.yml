---
name: CI
'on':
  pull_request:
  push:
    branches:
      - master
  schedule:
    - cron: '0 1 * * *'

jobs:

  makepkg:
    name: makepkg
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          #          - pkg: ansible-core-git
          #          - pkg: assetfinder
          #          - pkg: assetfinder-git
          #          - pkg: fcct
          - pkg: fcct-bin
          #          - pkg: gnome-shell-extension-public-ip-git
          #          - pkg: gnome-shell-extension-workspace-matrix
          #          - pkg: google-tsunami-security-scanner
          #          - pkg: google-tsunami-security-scanner-git
          #          - pkg: google-tsunami-security-scanner-plugins-git
          #          - pkg: jmeter-plugins-manager
          #          - pkg: obfs4proxy-behind-tor
          #          - pkg: tor-browser-behind-tor
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Exit if pkg doesn't exist.
        run: if [ ! -d "${{ matrix.pkg }}" ]; then exit 1; fi

      - name: Pull devel image.
        run: docker pull quay.io/aminvakil/archlinux:devel

      - name: Run a container of devel image and mount package on it.
        run: |
          container_id=$(mktemp)
          docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -v "${PWD}/${{ matrix.pkg }}":/pkg quay.io/aminvakil/archlinux:devel > "${container_id}"
          echo "container_id=$container_id" >> $GITHUB_ENV

      - name: Execute stuff before makepkg if there is any.
        run: if [ -f ci/"${{ matrix.pkg }}"/before_makepkg.sh ]; then docker exec -i "$(cat ${container_id})" sh < ci/"${{ matrix.pkg }}"/before_makepkg.sh; fi

      - name: Upgrade all packages.
        run: docker exec "$(cat ${container_id})" pacman -Suy --noconfirm

      - name: Change ownership of package folder
        run: "docker exec $(cat ${container_id}) chown -R devel: /pkg"

      - name: Install namcap
        run: docker exec "$(cat ${container_id})" pacman -S namcap --noconfirm

      - name: Namcap!
        run: if [ ! -f ci/"${{ matrix.pkg }}"/namcap_skip ]; then docker exec "$(cat ${container_id})" su devel sh -c "cd /pkg && namcap PKGBUILD"; fi

      - name: Makepkg!
        run: docker exec "$(cat ${container_id})" su devel sh -c "cd /pkg && makepkg -sri --noconfirm"

      - name: Stop and remove container forcefully.
        run: docker rm -f "$(cat ${container_id})"
  aurpublish:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [makepkg]
    name: Push to AUR
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          #          - pkg: ansible-core-git
          #          - pkg: assetfinder
          #          - pkg: assetfinder-git
          #          - pkg: fcct
          - pkg: fcct-bin
          #          - pkg: gnome-shell-extension-public-ip-git
          #          - pkg: gnome-shell-extension-workspace-matrix
          #          - pkg: google-tsunami-security-scanner
          #          - pkg: google-tsunami-security-scanner-git
          #          - pkg: google-tsunami-security-scanner-plugins-git
          #          - pkg: jmeter-plugins-manager
          #          - pkg: obfs4proxy-behind-tor
          #          - pkg: tor-browser-behind-tor
    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Pull base image.
        run: docker pull quay.io/aminvakil/archlinux:latest

      - name: Run a container of base image and mount repository on it.
        run: |
          container_id=$(mktemp)
          docker run --detach --privileged -v /sys/fs/cgroup:/sys/fs/cgroup:ro -v "${PWD}":/repo quay.io/aminvakil/archlinux:latest > "${container_id}"
          echo "container_id=$container_id" >> $GITHUB_ENV

      - name: Install aurpublish
        run: docker exec "$(cat ${container_id})" pacman -S aurpublish --noconfirm

      - name: Configure ssh config
        run: |
          docker exec "$(cat ${container_id})" "mkdir -p /root/.ssh"
          docker exec "$(cat ${container_id})" bash -c "echo 'Host aur aur.archlinux.org' > /root/.ssh/config"
          docker exec "$(cat ${container_id})" bash -c "echo '    User aur' > /root/.ssh/config"
          docker exec "$(cat ${container_id})" bash -c "echo '    Hostname aur.archlinux.org' > /root/.ssh/config"
          docker exec "$(cat ${container_id})" bash -c "echo '    IdentityFile ~/.ssh/keys/aur' > /root/.ssh/config"

      - name: Configure ssh key
        run: docker exec "$(cat ${container_id})" "echo ${{ secrets.AUR_KEY }} > /root/.ssh/keys/aur"

      - name: Aurpublish!
        run: docker exec "$(cat ${container_id})" "cd /pkg && aurpublish $${{ matrix.pkg }}"

      - name: Remove ssh key
        run: docker exec "$(cat ${container_id})" "rm /root/.ssh/keys/aur"

      - name: Stop and remove container forcefully.
        run: docker rm -f "$(cat ${container_id})"
